/* sipServerSipServiceSoap12BindingProxy.cpp
   Generated by gSOAP 2.8.8 from sipsvr.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "sipServerSipServiceSoap12BindingProxy.h"

SipServiceSoap12BindingProxy::SipServiceSoap12BindingProxy()
{	SipServiceSoap12BindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SipServiceSoap12BindingProxy::SipServiceSoap12BindingProxy(const struct soap &_soap) : soap(_soap)
{ }

SipServiceSoap12BindingProxy::SipServiceSoap12BindingProxy(const char *url)
{	SipServiceSoap12BindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

SipServiceSoap12BindingProxy::SipServiceSoap12BindingProxy(soap_mode iomode)
{	SipServiceSoap12BindingProxy_init(iomode, iomode);
}

SipServiceSoap12BindingProxy::SipServiceSoap12BindingProxy(const char *url, soap_mode iomode)
{	SipServiceSoap12BindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

SipServiceSoap12BindingProxy::SipServiceSoap12BindingProxy(soap_mode imode, soap_mode omode)
{	SipServiceSoap12BindingProxy_init(imode, omode);
}

SipServiceSoap12BindingProxy::~SipServiceSoap12BindingProxy()
{ }

void SipServiceSoap12BindingProxy::SipServiceSoap12BindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://www.w3.org/2003/05/soap-envelope", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://www.w3.org/2003/05/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"sipService2", "http://server.ws.vis.cms.hikvision.com/SipServiceSoap11Binding", NULL, NULL},
	{"sipService1", "http://server.ws.vis.cms.hikvision.com", NULL, NULL},
	{"sipService3", "http://server.ws.vis.cms.hikvision.com/SipServiceSoap12Binding", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void SipServiceSoap12BindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void SipServiceSoap12BindingProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	SipServiceSoap12BindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void SipServiceSoap12BindingProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *SipServiceSoap12BindingProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *SipServiceSoap12BindingProxy::soap_fault()
{	return this->fault;
}

const char *SipServiceSoap12BindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *SipServiceSoap12BindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int SipServiceSoap12BindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

int SipServiceSoap12BindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void SipServiceSoap12BindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void SipServiceSoap12BindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *SipServiceSoap12BindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int SipServiceSoap12BindingProxy::writeCallRecord(const char *endpoint, const char *soap_action, _sipService1__writeCallRecord *sipService1__writeCallRecord, _sipService1__writeCallRecordResponse *sipService1__writeCallRecordResponse)
{	struct soap *soap = this;
	struct __sipService3__writeCallRecord soap_tmp___sipService3__writeCallRecord;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/vis/services/SipService";
	if (!soap_action)
		soap_action = "urn:writeCallRecord";
	soap->encodingStyle = NULL;
	soap_tmp___sipService3__writeCallRecord.sipService1__writeCallRecord = sipService1__writeCallRecord;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___sipService3__writeCallRecord(soap, &soap_tmp___sipService3__writeCallRecord);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___sipService3__writeCallRecord(soap, &soap_tmp___sipService3__writeCallRecord, "-sipService3:writeCallRecord", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___sipService3__writeCallRecord(soap, &soap_tmp___sipService3__writeCallRecord, "-sipService3:writeCallRecord", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!sipService1__writeCallRecordResponse)
		return soap_closesock(soap);
	sipService1__writeCallRecordResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	sipService1__writeCallRecordResponse->soap_get(soap, "sipService1:writeCallRecordResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
